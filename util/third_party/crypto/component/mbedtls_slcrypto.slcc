id: mbedtls_slcrypto
package: platform
label: Mbed TLS Support for EFM32/EFR32 Crypto Acceleration
description:
  "This component enables hardware acceleration in Mbed TLS for EFM32 and \
  EFR32 devices.\n

  NOTE: There should not be any need for selecting this component manually,\
  any other components requiring it will select it automatically."
category: Platform|Security|Internal
quality: production
component_root_path: util/third_party/crypto
source:
  - path: sl_component/sl_alt/source/sl_mbedtls.c
  # Series 0 device support
  - path: sl_component/sl_mbedtls_support/src/aes_aes.c
    condition: [device_has_aes]
  # Series 1 device support
  - path: sl_component/sl_mbedtls_support/src/crypto_aes.c
    condition: [mbedtls_aes, device_has_crypto]
  - path: sl_component/sl_mbedtls_support/src/crypto_ecp.c
    condition: [mbedtls_ecc, device_has_crypto]
  - path: sl_component/sl_mbedtls_support/src/crypto_gcm.c
    condition: [mbedtls_gcm, device_has_crypto]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_cmac.c
    condition: [mbedtls_cmac, device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_sha.c
    condition: [mbedtls_sha_function, device_has_crypto]
  # Series 2 device support with SE
  - path: sl_component/sl_mbedtls_support/src/se_aes.c
    condition: [mbedtls_aes, device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/se_ccm.c
    condition: [mbedtls_ccm, device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_cmac.c
    condition: [mbedtls_cmac, device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_ecdsa_ecdh.c
    condition: [mbedtls_ecc, device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/se_gcm.c
    condition: [mbedtls_gcm, device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/se_jpake.c
    condition: [mbedtls_jpake, device_has_semailbox]
  - path: sl_component/sl_alt/source/sl_se_management.c
    condition: [device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_sha.c
    condition: [mbedtls_sha_function, device_has_semailbox]
  # Series 2 device support without SE
  - path: sl_component/sl_mbedtls_support/src/cryptoacc_aes.c
    condition: [device_has_cryptoacc]
  - path: sl_component/sl_mbedtls_support/src/cryptoacc_ccm.c
    condition: [device_has_cryptoacc]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_cmac.c
    condition: [device_has_cryptoacc]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_ecdsa_ecdh.c
    condition: [device_has_cryptoacc]
  - path: sl_component/sl_mbedtls_support/src/cryptoacc_gcm.c
    condition: [device_has_cryptoacc]
  - path: sl_component/sl_mbedtls_support/src/mbedtls_sha.c
    condition: [mbedtls_sha_function, device_has_cryptoacc]
include:
  - path: sl_component/sl_alt/include
    file_list:
      - path: sl_mbedtls.h
      - path: se_management.h
        condition: [device_has_semailbox]
  - path: sl_component/sl_mbedtls_support/inc
    file_list:
      - path: aes_alt.h
      - path: ccm_alt.h
      - path: cmac_alt.h
      - path: sha1_alt.h
      - path: sha256_alt.h
      - path: sha512_alt.h
      - path: threading_alt.h
      # Series 1 device support
      - path: gcm_alt.h
        condition: [device_has_crypto]
      # Series 2 device support with SE
      - path: gcm_alt.h
        condition: [device_has_semailbox]
      - path: ecjpake_alt.h
        condition: [device_has_semailbox]
      # Series 2 device support with Vault security
      - path: sha512_alt.h
        condition: [device_security_vault]
      # Series 2 device support without SE
      - path: gcm_alt.h
        condition: [device_has_cryptoacc]
requires:
  - name: emlib_crypto
    condition: [device_has_crypto]
  - name: emlib_aes
    condition: [device_has_aes]
  - name: emlib_se
    condition: [device_has_semailbox]
  - name: psa_driver
  - name: cryptoacc_library
    condition: [device_has_cryptoacc]
  - name: se_manager
    condition: [device_series_2]
  - name: silabs_core_sl_malloc
  - name: component_catalog
provides:
  - name: mbedtls_slcrypto
template_contribution:
# FreeRTOS threading support
  - name: mbedtls_config
    value: MBEDTLS_THREADING_C
    condition: [freertos]
  - name: mbedtls_config
    value: MBEDTLS_THREADING_ALT
    condition: [freertos]
# Micrium OS threading support
  - name: mbedtls_config
    value: MBEDTLS_THREADING_C
    condition: [micriumos]
  - name: mbedtls_config
    value: MBEDTLS_THREADING_ALT
    condition: [micriumos]
  - name: event_handler
    value:
      event: service_init
      include: sl_mbedtls.h
      handler: sl_mbedtls_init
documentation:
  docset: mbed-tls
  document: group-sl-crypto
