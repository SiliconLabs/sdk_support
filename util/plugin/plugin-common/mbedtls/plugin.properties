name=mbed TLS
description=This plugin includes the mbed TLS library files as well as the Silicon Labs provided mbed TLS plugin files. \
This plugin also comes together with the mbed TLS plugin service setup. Enabled mbed TLS plugin service features \
is going to be generated to the mbed TLS configuration file as well as any other feature that is required by related plugins.

category=Utility
qualityString=Alpha Quality
quality=alpha
includedByDefault=false

architecture=efr32, simulation, simulation-ezsp, host-simulation, unix

providedApis=mbedtls
options=confDeviceAcceleration,confDeviceAccelerationApp

# This is to add the device acceleration config file macro only for EFR32 part.
confDeviceAcceleration.name=Device Acceleration - Common
confDeviceAcceleration.description=Device Acceleration - Common
confDeviceAcceleration.type=BOOLEAN
confDeviceAcceleration.hidden=TRUE
confDeviceAcceleration.default=true
confDeviceAcceleration.enabledIf=conf.architectureMatches("efr32")
confDeviceAcceleration.macro=-DMBEDTLS_DEVICE_ACCELERATION_CONFIG_FILE="config-device-acceleration.h"

confDeviceAccelerationApp.name=Device Acceleration - App
confDeviceAccelerationApp.description=Application specific device acceleration configuration. Unselect it if custom file is provided.
confDeviceAccelerationApp.type=BOOLEAN
confDeviceAccelerationApp.default=true
confDeviceAccelerationApp.enabledIf=conf.architectureMatches("efr32")
confDeviceAccelerationApp.macro=-DMBEDTLS_DEVICE_ACCELERATION_CONFIG_APP_FILE="config-device-acceleration-app.h"

setup(macros) {
  -DMBEDTLS_CONFIG_FILE="mbedtls-config-generated.h"
}

setup(additionalFiles) {
  PATH(ABSOLUTE):$CRYPTO/mbedtls
  PATH(ABSOLUTE):$CRYPTO/mbedtls/include/mbedtls
  PATH(ABSOLUTE):$CRYPTO/mbedtls/include/psa
  PATH(ABSOLUTE):$CRYPTO/mbedtls/include
  PATH(ABSOLUTE):$CRYPTO/mbedtls/library
  (efr32)=PATH(ABSOLUTE):$CRYPTO/sl_component/sl_alt/include
  (efr32)=PATH(ABSOLUTE):$CRYPTO/sl_component/sl_mbedtls_support/inc
  (efr32)=PATH(ABSOLUTE):$CRYPTO/sl_component/sl_mbedtls_support/config
  (efr32)=PATH(ABSOLUTE):$CRYPTO/sl_component/sl_psa_driver/inc
  (efr32)=PATH(ABSOLUTE):$CRYPTO/sl_component/sl_protocol_crypto/src
  (efr32~series[2])=PATH(ABSOLUTE):$CRYPTO/sl_component/se_manager/inc
  (efr32~series[2])=PATH(ABSOLUTE):$CRYPTO/sl_component/se_manager/src
  (efr32~series[2])=PATH(ABSOLUTE):$CRYPTO/sl_component/sl_cryptoacc_library/include
  PATH(ABSOLUTE):$PLUGIN/plugin-common/mbedtls
}

files(mbedtls-efr32) {
  $CRYPTO/sl_component/se_manager/src/*.c
  $CRYPTO/sl_component/sl_alt/source/sl_entropy.c
  $CRYPTO/sl_component/sl_alt/source/sl_mbedtls.c
  $CRYPTO/sl_component/sl_alt/source/sl_se_management.c
  $CRYPTO/sl_component/sl_alt/source/sl_psa_its_nvm3.c
  $CRYPTO/sl_component/sl_mbedtls_support/src/*.c
  $CRYPTO/sl_component/sl_psa_driver/src/*.c
  $CRYPTO/sl_component/sl_protocol_crypto/src/*.c
}

files(mbedtls-efr32-xg22) {
  $CRYPTO/sl_component/sl_cryptoacc_library/src/*.c
}

files(mbedtls-library) {
  # reverting to a manual list pending resolution of MCUDT-18010
  #$CRYPTO/mbedtls/library/*.c
  $CRYPTO/mbedtls/library/aes.c
  $CRYPTO/mbedtls/library/asn1parse.c
  $CRYPTO/mbedtls/library/asn1write.c
  $CRYPTO/mbedtls/library/base64.c
  $CRYPTO/mbedtls/library/bignum.c
  $CRYPTO/mbedtls/library/ccm.c
  $CRYPTO/mbedtls/library/chacha20.c
  $CRYPTO/mbedtls/library/chachapoly.c
  $CRYPTO/mbedtls/library/cipher.c
  $CRYPTO/mbedtls/library/cipher_wrap.c
  $CRYPTO/mbedtls/library/cmac.c
  $CRYPTO/mbedtls/library/ctr_drbg.c
  $CRYPTO/mbedtls/library/des.c
  $CRYPTO/mbedtls/library/ecdh.c
  $CRYPTO/mbedtls/library/ecdsa.c
  $CRYPTO/mbedtls/library/ecjpake.c
  $CRYPTO/mbedtls/library/ecp.c
  $CRYPTO/mbedtls/library/ecp_curves.c
  $CRYPTO/mbedtls/library/entropy.c
  $CRYPTO/mbedtls/library/error.c
  $CRYPTO/mbedtls/library/gcm.c
  $CRYPTO/mbedtls/library/md.c
  $CRYPTO/mbedtls/library/md5.c
  $CRYPTO/mbedtls/library/oid.c
  $CRYPTO/mbedtls/library/pem.c
  $CRYPTO/mbedtls/library/pk.c
  $CRYPTO/mbedtls/library/pkparse.c
  $CRYPTO/mbedtls/library/pk_wrap.c
  # Excluding as it breaks the build if third-party calloc/malloc present
  # $CRYPTO/mbedtls/library/platform.c
  $CRYPTO/mbedtls/library/platform_util.c
  $CRYPTO/mbedtls/library/poly1305.c
  $CRYPTO/mbedtls/library/psa_crypto.c
  $CRYPTO/mbedtls/library/psa_crypto_driver_wrappers.c
  $CRYPTO/mbedtls/library/psa_crypto_slot_management.c
  $CRYPTO/mbedtls/library/psa_crypto_storage.c
  $CRYPTO/mbedtls/library/rsa.c
  $CRYPTO/mbedtls/library/rsa_internal.c
  $CRYPTO/mbedtls/library/sha1.c
  $CRYPTO/mbedtls/library/sha256.c
  $CRYPTO/mbedtls/library/sha512.c
  $CRYPTO/mbedtls/library/ssl_cache.c
  $CRYPTO/mbedtls/library/ssl_ciphersuites.c
  $CRYPTO/mbedtls/library/ssl_cli.c
  $CRYPTO/mbedtls/library/ssl_cookie.c
  $CRYPTO/mbedtls/library/ssl_msg.c
  $CRYPTO/mbedtls/library/ssl_srv.c
  $CRYPTO/mbedtls/library/ssl_ticket.c
  $CRYPTO/mbedtls/library/ssl_tls.c
  $CRYPTO/mbedtls/library/threading.c
  $CRYPTO/mbedtls/library/x509.c
  $CRYPTO/mbedtls/library/x509_create.c
  $CRYPTO/mbedtls/library/x509_crl.c
  $CRYPTO/mbedtls/library/x509_crt.c
  $CRYPTO/mbedtls/library/x509_csr.c
  $CRYPTO/mbedtls/library/x509write_crt.c
  $CRYPTO/mbedtls/library/x509write_csr.c
}

$mbedtls-efr32          (efr32)
$mbedtls-efr32-xg22     (efr32~series[2]~device_configuration[2])
$mbedtls-library        (efr32, simulation, simulation-ezsp, unix)
